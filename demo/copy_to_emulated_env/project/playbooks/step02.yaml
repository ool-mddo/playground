---
- hosts: localhost
  connection: local
  gather_facts: no

  tasks:
  - name: "get convert table"
    uri:
      url: "http://api-proxy/topologies/mddo-ospf/emulated_asis/topology/layer3/config_params"
      method: "GET"
      body_format: json
    register: node_list

  - name: generate config
    template:
      src: crpd.j2
      dest: "configs/{{ item.name }}.conf"
    when: '"segment" not in item.type'
    loop: "{{ node_list.json }}"


  - name: "get ospf table"
    uri:
      url: "http://api-proxy/topologies/mddo-ospf/emulated_asis/topology/ospf_area0/interfaces?node_type=ospf_proc"
      method: "GET"
      body_format: json
    register: ospf_list


  - name: generate config
    template:
      src: crpd_ospf.j2
      dest: "configs/{{ item.node }}_ospf.conf"
    loop: "{{ ospf_list.json }}"

  - name: "get ospf table"
    uri:
      url: "http://api-proxy/topologies/mddo-ospf/emulated_asis/topology"
      method: "GET"
      body_format: json
    register: topology

  - set_fact:
      layer3index: "{{ l3_index }}"
    when: item['network-id'] == "layer3"
    loop: "{{ topology.json | json_query('*.network[]') }}"
    loop_control:
      index_var: l3_index

  - name: generate static-route config
    template:
      src: crpd_static.j2
      dest: "configs/{{ item['node-id'] }}_routing-options.conf"
    vars:
      query: '*.network[{{ layer3index }}].node[*]'
    when: '"Seg" not in item["node-id"]'
    loop: "{{ topology.json | json_query(query) | flatten }}"

  - name: merge static-route config
    shell: "cat configs/{{ item['node-id'] }}_routing-options.conf >>  configs/{{ item['node-id'] }}.conf "
    vars:
      query: '*.network[{{ layer3index }}].node[*]'
    when: '"Seg" not in item["node-id"]'
    loop: "{{ topology.json | json_query(query) | flatten }}"

  - name: merge ospf config
    shell: "cat configs/{{ item.node }}_ospf.conf >> configs/{{ item.node }}.conf "
    loop: "{{ ospf_list.json }}"


  - name: generate bridge data
    set_fact:
      bridgedata: "{{ bridgedata | default([])  + [ data ] }}"
    vars:
      data:
       name: "{{ item.agent_name }}"
       if_list: >-
         {%- for dict in item.if_list -%}
         {%-  if 'description' in dict -%}
         { 'name': '{{ dict.agent_name }}', 'description': '{{ dict.description }}'},
         {%- else -%}
         { 'name': '{{ dict.agent_name }}' },
         {%- endif -%}
         {%- endfor -%}
    when: '"segment" in item.type'
    loop: "{{ node_list.json }}"

  - name: generate config
    template:
      src: ceos.j2
      dest: "configs/{{ item.name }}.conf"
    loop: "{{ bridgedata }}"

  - name: upload generated config
    uri:
      url: "http://api-proxy/configs/mddo-ospf/emulated_asis/"
      method: POST
      return_content: no
      body_format: json
      headers:
        Content-Type: "application/json"
      body: [{"filename": "{{ item.agent_name }}.conf", "text": "{{ lookup('file', \"configs/{{ item.agent_name }}.conf\") }}"}]
    loop: "{{ node_list.json }}"

- hosts: docker-host
  gather_facts: false
  become: yes
  vars:
    ansible_user: "{{ login_user}}"
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: "get convert table"
      uri:
        url: "http://localhost:15000/topologies/mddo-ospf/emulated_asis/topology/layer3/config_params"
        method: "GET"
        body_format: json
      register: node_list


    - copy:
        src: "configs/{{ item.agent_name }}.conf"
        dest: "{{ ansible_runner_dir }}/clab/{{ item.agent_name }}.conf"
      loop: "{{ node_list.json }}"
      ignore_errors: True

    - name: "get clab topo yaml"
      uri:
        url: "http://localhost:15000/topologies/mddo-ospf/emulated_asis/topology/layer3/containerlab_topology"
        method: "GET"
        body_format: json
      register: containerlab

    - name: Creating clab-topo.yaml 
      copy:
        dest: "{{ ansible_runner_dir }}/clab/clab-topo.yaml"
        content: "{{ containerlab.json | to_yaml }}"

    - name: "delete ovs-br {{ item.key }}"
      shell: "ovs-vsctl del-br {{ item.key }}"
      when: '"ovs" in item.value.kind'
      loop: "{{ lookup( 'ansible.builtin.dict', containerlab.json.topology.nodes) }}"
      ignore_errors: True

    - name: "create ovs-br {{ item.key }}"
      shell: "ovs-vsctl add-br {{ item.key }}"
      when: '"ovs" in item.value.kind'
      loop: "{{ lookup( 'ansible.builtin.dict', containerlab.json.topology.nodes) }}"
      ignore_errors: True

    - name: deploy containerlab
      shell:
        cmd: "containerlab deploy --topo clab-topo.yaml --reconfigure"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"
        
