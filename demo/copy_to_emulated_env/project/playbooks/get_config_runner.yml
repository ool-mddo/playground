---
- hosts: localhost
  gather_facts: false
  connection: local
  collections:
    - netbox.netbox

  vars:
    ansible_python_interpreter: /usr/bin/python3
    netbox_url: http://192.168.23.31:8000
    netbox_token: 0123456789abcdef0123456789abcdef01234567

  tasks:
    - name: add host values
      add_host:
        groups: "network"
        name: "{{ item.value.name }}"
        ansible_host: "{{ item.value.local_context_data.ansible_host }}"
        ansible_network_os: "{{ item.value.local_context_data.ansible_network_os }}"
        ansible_user: "{{ item.value.local_context_data.ansible_user }}"
        ansible_password: "{{ item.value.local_context_data.ansible_password }}"
      loop: "{{ query('netbox.netbox.nb_lookup','devices', api_endpoint=netbox_url, token=netbox_token) }}"


- hosts: network 
  gather_facts: false

  tasks:
    - name: mkdir -p hosts
      shell: mkdir -p /data/hosts
      delegate_to: localhost

    - name: cat /etc/netplan/99_config.yaml
      ansible.builtin.command: cat /etc/netplan/99_config.yaml
      when: ansible_network_os == 'server'
      register: netplan_result

    - name: netplan_result convert yaml
      set_fact: 
        netplan: "{{ netplan_result.stdout | from_yaml }}"
      when: ansible_network_os == 'server'

    - name: generate host.json data
      set_fact: 
        hostjson: |-
            {
                "hostname" : "{{ inventory_hostname }}",
                "iptablesFile" : "",
                "hostInterfaces" : 
                {
                    {%- for key, value in netplan.network.ethernets.items() -%}
                        "{{ key }}" : {
                          "name": "{{ key }}",
                          "prefix" : "{{ value.addresses[0] }}",
                          {%- if value.gateway4 is defined -%}
                          "gateway" : "{{ value.gateway4 }}"
                          {%- endif -%}
                        },
                    {%- endfor -%}
                }
            }
      when: ansible_network_os == 'server'

    - name: save config files
      copy:
        content: "{{ hostjson | to_nice_json}}"
        dest: "../hosts/{{ inventory_hostname}}.json"
      when: ansible_network_os == 'server'
      changed_when: False
      delegate_to: localhost

- hosts: network 
  connection: ansible.netcommon.network_cli
  gather_facts: false
  vars:
      config_dir: "/data/configs"

  tasks:
    - name: mkdir -p configs
      shell: mkdir -p /data/configs
      delegate_to: localhost

    - name: show command
      ansible.netcommon.cli_command:
        command: show config
      when: ansible_network_os == 'junos'
      register: command_junos_result

    - name: save config files
      copy:
        content: "{{ command_junos_result.stdout }}"
        dest: "{{ config_dir }}/{{ inventory_hostname }}_config.txt"
      when: ansible_network_os == 'junos'
      changed_when: False

    - name: show command
      ansible.netcommon.cli_command:
        command: show running-config
      when: ansible_network_os == 'iosxr'
      register: command_ios_result

    - name: save config files
      copy:
        content: "{{ command_ios_result.stdout }}"
        dest: "{{ config_dir }}/{{ inventory_hostname }}_config.txt"
      when: ansible_network_os == 'iosxr'
      changed_when: False

    - name: change enable mode 
      ansible.netcommon.cli_command:
        command: enable 
      when: ansible_network_os == 'eos'

    - name: show command
      ansible.netcommon.cli_command:
        command: show running-config 
      when: ansible_network_os == 'eos'
      register: command_eos_result
        
    - name: save config files
      copy:
        content: "{{ command_eos_result.stdout }}"
        dest: "{{ config_dir }}/{{ inventory_hostname }}_config.txt"
      when: ansible_network_os == 'eos'
      changed_when: False

