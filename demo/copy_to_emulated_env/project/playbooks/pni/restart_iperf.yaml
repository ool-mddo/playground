---
- hosts: docker-host
  gather_facts: false
  become: true
  vars:
    ansible_user: "{{ login_user }}"
    ansible_python_interpreter: /usr/bin/python3
    gen_iperf_command: project/playbooks/{{ usecase_common_name }}/generate_iperf_command.py
    flow_data: project/playbooks/{{ usecase_name }}/flowdata.csv
    static_route_data: project/playbooks/configs/static-route.yaml
    iperf_params_data_runner: ../configs/iperf_params.json  # in runner container path (origin: this playbook dir)
    iperf_params_data: project/playbooks/configs/iperf_params.json  # in remote host path
    clab_restart: "{{ clab_restart }}"

  tasks:
    - name: deploy containerlab
      shell:
        cmd: "containerlab deploy --topo clab-topo.yaml --reconfigure"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"
      when:
        clab_restart == "true"

    - name: enable bgp license
      shell:
        cmd: "sudo containerlab exec --topo clab-topo.yaml --label clab-node-kind=juniper_crpd --cmd 'cli request system license add /tmp/license.key'"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"

    - name: "get converted topology"
      uri:
        url: "http://localhost:15000/topologies/{{ network_name }}/emulated_asis/topology"
        method: "GET"
        body_format: json
      register: topology

    - name: search L3 network index
      set_fact:
        layer3index: "{{ l3_index }}"
      when: item['network-id'] == "layer3"
      loop: "{{ topology.json | json_query('*.network[]') }}"
      loop_control:
        index_var: l3_index

    - name: generate iperf endpoint static-route info
      set_fact:
        iperf_list: "{{ iperf_list | default([]) + [ item ] }}"
      vars:
        query: '*.network[{{ layer3index }}].node[*]'
      when: item["mddo-topology:l3-node-attributes"]["node-type"] == 'endpoint'
      loop: "{{ topology.json | json_query(query) | flatten }}"

    - name: setting eth1 & default routing
      shell:
        cmd: "{{ exec_container }} {{ add_eth1_ip }}; {{ exec_container }} {{ del_default_route }}; {{ exec_container }} {{ add_default_route }}"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item['node-id'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
        add_eth1_ip: 'ip addr add {{ item["ietf-network-topology:termination-point"][0]["mddo-topology:l3-termination-point-attributes"]["ip-address"][0] }} dev eth1 '
        del_default_route: "ip route del default via 172.20.20.1"
        add_default_route: 'ip route add default via {{ item["mddo-topology:l3-node-attributes"]["static-route"][0]["next-hop"] }}'
      loop: "{{ iperf_list }}"
      ignore_errors: true

    - name: create static-route.yaml (as input for generate_iperf_coomand.py)
      copy:
        dest: "{{ ansible_runner_dir }}/project/playbooks/configs/static-route.yaml"
        content: "{{ iperf_list | to_yaml }}"

    - name: generate iperf command parameter
      shell:
        cmd: "python3 {{ gen_iperf_command }} {{ flow_data }} {{ static_route_data }} > {{ iperf_params_data }}"
      args:
        chdir: "{{ ansible_runner_dir }}"

    - name: iperf server command
      debug:
        msg: '{{ exec_container }} /bin/bash -c "nohup iperf3 -s -p {{ item.1.number }} > out_{{ item.1.number }}.log &"'
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item.0['node'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
      with_subelements:
        - "{{ lookup('file', iperf_params_data_runner) }}"
        - port

    - name: iperf server command
      shell:
        cmd: '{{ exec_container }} /bin/bash -c "nohup iperf3 -s -p {{ item.1.number }} > out_{{ item.1.number }}.log 2>&1 &"'
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item.0['node'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
      with_subelements:
        - "{{ lookup('file', iperf_params_data_runner) }}"
        - port

    - name: iperf client command
      debug:
        msg: '{{ exec_container }} /bin/bash -c "nohup iperf3 -t 0 -c {{ item.1["dest_address"] }} -b {{ item.1.rate | int }}K -p {{ item.1.number }} > out_{{ item.0.node }}.log &"'
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item.1['source'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
      with_subelements:
        - "{{ lookup('file', iperf_params_data_runner) }}"
        - port

    - name: iperf client command
      shell:
        cmd: '{{ exec_container }} /bin/bash -c "nohup iperf3 -t 0 -c {{ item.1["dest_address"] }} -b {{ item.1.rate | int }}K -p {{ item.1.number }} > out_{{ item.0.node }}.log 2>&1 &"'
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item.1['source'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
      with_subelements:
        - "{{ lookup('file', iperf_params_data_runner) }}"
        - port
