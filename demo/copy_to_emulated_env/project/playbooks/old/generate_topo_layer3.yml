---
- hosts: localhost
  gather_facts: false
  become: yes
  vars:
    mddo_model_file: "./pushed_configs_mddo_network.json"
    nodes: {}
    containerlab: []
    convertif: []
    bridge_image:
      kind: linux
      image: ghcr.io/ool-mddo/clab-ovs:latest
    cnf_image:
      kind: 'juniper_crpd'
      #kind: 'crpd'
      image: 'crpd:22.1R1.10'
  tasks:
    - name: "lookup {{ mddo_model_file }}"
      set_fact: 
        topology: "{{lookup('file', mddo_model_file) }}"
        
    - name: "parse layer3 topology phase1"
      set_fact:
        topology2: "{{ topology['ietf-network:networks'] | json_query(query1) }}"
      vars:
        query1: 'network[-3]'

    - debug:
        msg: "{{ topology2 }}"
       
    - name: "parse layer3 topology phase2"
      set_fact:
        layer3: "{{ topology2['node']  | json_query(query1) }}"
      vars:
        query1: '[*].{"node": "node-id", "l3_if": "ietf-network-topology:termination-point"}'

    - name: "generate tp-id list"
      set_fact:
            if_list: "{{ if_list| default([]) + [ { item['node'] : item['l3_if'] | json_query(query1)   } ] }}"
      vars:
        query1: '[*]."tp-id"'
      loop: "{{ layer3 }}"

    - name: generate convert-if(cnf)
      set_fact: 
        convertif: "{{ convertif + [ tmpdict ]  }}"
      vars:
        tmpdict:
         node: "{{ key[0] }}"
         iflist: "{{ tmp }}"
        key: "{{ item.keys() | list }}"
        tmp: |-
          [
          {%- for list in  item.values() -%}
          {%- for value in  list -%}
          {%- set current = list.index(value) -%}
          { "{{ value }}": "eth{{ current +1  }}" } ,
          {%- endfor -%}
          {%- endfor -%}
          ] 
      loop: "{{ if_list  }}"


    - name: generate convert-if file
      copy:
        dest: "./convert-if.yml"
        content: "{{ convertif | to_nice_yaml }}"

    - name: generate inout_info file
      set_fact:
        inout_info: "{{topology2['ietf-network-topology:link']  | json_query(query1)}}"
      vars:
        query1: '[*].{"dest-node": destination."dest-node", "dest-if": destination."dest-tp", "source-node": source."source-node", "source-if": source."source-tp"}'
    - name: merge inout_info & convert-if
      set_fact:
        tmp_uniq_list: "{{ tmp_uniq_list |default([]) + [ { key1: 1, key2: 1 } ]  }}"
      vars:
        key1: >-
          {%- for tmpdict in convertif -%}
          {%-   if item['dest-node'] == tmpdict['node'] -%}
          {%-     for key in tmpdict.iflist -%}
          {%-       set ifnamelist = key.keys() -%}
          {%-       for ifname in ifnamelist -%}
          {%-         if ( ifname == item['dest-if'] ) -%}
          {%-           for convertifname in key.values() -%}
          {{ item['dest-node'] | regex_replace('\/', '_' )}}:{{ convertifname }}
          {%-           endfor -%}
          {%-         endif -%}
          {%-       endfor -%}
          {%-     endfor -%}
          {%-   endif -%}
          {%- endfor -%}
        key2: >-
          {%- for tmpdict in convertif -%}
          {%-   if item['source-node'] == tmpdict['node'] -%}
          {%-     for key in tmpdict.iflist -%}
          {%-       set ifnamelist = key.keys() -%}
          {%-       for ifname in ifnamelist -%}
          {%-         if ( ifname == item['source-if'] ) -%}
          {%-           for convertifname in key.values() -%}
          {{ item['source-node'] | regex_replace('\/', '_' ) }}:{{ convertifname }}
          {%-           endfor -%}
          {%-         endif -%}
          {%-       endfor -%}
          {%-     endfor -%}
          {%-   endif -%}
          {%- endfor -%}
      loop: "{{ inout_info  }}"

    - name: iflist uniq
      set_fact:
        uniq_list: "{{ tmp_uniq_list | unique }}"


    - name: generate endpoints data
      set_fact:
        links: '{{ links | default([]) + [ { "endpoints": liststring } ] }}'
      vars:
        liststring: "{{ item.keys() | list }}"
      loop: "{{ uniq_list }}"


    - set_fact:
        nodes: '{{ nodes | combine( { convert_nodes : tmp_cnf_image } ) }}'
      vars:
        convert_nodes: "{{ item['dest-node'] }}" 
        tmp_cnf_image: "{{ cnf_image | combine( {'startup-config': config_file } ) }}"
        config_file: "{{ item['dest-node'] }}.conf"
      when: '"Seg" not in item["dest-node"]'
      loop: "{{ inout_info }}"

    - set_fact:
        nodes: "{{ nodes | combine( { convert_nodes : bridge_image } ) }}"
      vars:
        convert_nodes: "{{ item['dest-node'] | regex_replace('\/', '_' ) }}" 
      when: '"Seg" in item["dest-node"]'
      loop: "{{ inout_info }}"

    - set_fact:
        containerlab:
          name: "mddo-lab"
          topology:
            nodes: "{{ nodes }}"
            links: "{{ links }}"

    - name:
      copy:
        dest: "./clab-topo.yml"
        content: "{{ containerlab | to_nice_yaml }}"


