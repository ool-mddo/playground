---
- hosts: localhost
  connection: local
  gather_facts: no

  tasks:
  - name: "get convert table"
    uri:
      url: "http://api-proxy/topologies/{{ network_name }}/emulated_asis/topology/layer3/config_params"
      method: "GET"
      body_format: json
    register: node_list

  - name: generate config
    template:
      src: template/crpd.j2
      dest: "configs/{{ item.name }}.conf"
    when: '"segment" not in item.type'
    loop: "{{ node_list.json }}"


  - name: "get ospf table"
    uri:
      url: "http://api-proxy/topologies/{{ network_name }}/emulated_asis/topology/layer_type_ospf/interfaces?node_type=ospf_proc"
      method: "GET"
      body_format: json
    register: ospf_list

  - name: "get whole topology"
    uri:
      url: "http://api-proxy/topologies/{{ network_name }}/emulated_asis/topology"
      method: "GET"
      body_format: json
    register: topology

  - name: search L3 network index
    set_fact:
      layer3index: "{{ l3_index }}"
    when: item['network-id'] == "layer3"
    loop: "{{ topology.json | json_query('*.network[]') }}"
    loop_control:
      index_var: l3_index

  - name: search bgp_proc network index
    set_fact:
      bgpindex: "{{ bgp_proc_index }}"
    when: item['network-id'] == "bgp_proc"
    loop: "{{ topology.json | json_query('*.network[]') }}"
    loop_control:
      index_var: bgp_proc_index

  - name: generate static-route config
    template:
      src: template/crpd_static.j2
      dest: "configs/{{ item['node-id'] }}_routing-options.conf"
    vars:
      query: '*.network[{{ layer3index }}].node[*]'
    when: '"Seg" not in item["node-id"]'
    loop: "{{ topology.json | json_query(query) | flatten }}"

  - name: merge static-route config
    shell: "cat configs/{{ item['node-id'] }}_routing-options.conf >>  configs/{{ item['node-id'] }}.conf ; rm configs/{{ item['node-id'] }}_routing-options.conf"
    vars:
      query: '*.network[{{ layer3index }}].node[*]'
    when: '"Seg" not in item["node-id"]'
    loop: "{{ topology.json | json_query(query) | flatten }}"

  - name: generate policy config
    template:
      src: template/crpd_policy.j2
      dest: "configs/{{ item['supporting-node'][0]['node-ref'] }}_policy.conf"
    vars:
      query: '*.network[{{ bgpindex }}].node[*]'
    loop: "{{ topology.json | json_query(query) | flatten }}"

  - name: merge policy config
    shell: "cat configs/{{ item['supporting-node'][0]['node-ref'] }}_policy.conf >> configs/{{ item['supporting-node'][0]['node-ref'] }}.conf ; rm configs/{{ item['supporting-node'][0]['node-ref'] }}_policy.conf"
    vars:
      query: '*.network[{{ bgpindex }}].node[*]'
    loop: "{{ topology.json | json_query(query) | flatten }}"

  - name: generate bgp peer config
    template:
      src: template/crpd_bgp.j2
      dest: "configs/{{ item['supporting-node'][0]['node-ref'] }}_bgp.conf"
    vars:
      query: '*.network[{{ bgpindex }}].node[*]'
    loop: "{{ topology.json | json_query(query) | flatten }}"

  - name: merge bgp peer config
    shell: "cat configs/{{ item['supporting-node'][0]['node-ref'] }}_bgp.conf >> configs/{{ item['supporting-node'][0]['node-ref'] }}.conf ; rm configs/{{ item['supporting-node'][0]['node-ref'] }}_bgp.conf"
    vars:
      query: '*.network[{{ bgpindex }}].node[*]'
    loop: "{{ topology.json | json_query(query) | flatten }}"

  - name: generate ospf config
    template:
      src: template/crpd_ospf.j2
      dest: "configs/{{ item.1.node }}_ospf_area{{item.0.attribute.identifier}}.conf"
    loop: "{{ ospf_list.json | subelements('nodes', skip_missing=True) }}"

  - name: merge ospf config
    shell: "cat configs/{{ item.1.node }}_ospf_area{{item.0.attribute.identifier}}.conf >> configs/{{ item.1.node }}.conf ; rm configs/{{ item.1.node }}_ospf_area{{item.0.attribute.identifier}}.conf"
    loop: "{{ ospf_list.json | subelements('nodes', skip_missing=True) }}"

  - name: generate bridge data
    set_fact:
      bridgedata: "{{ bridgedata | default([])  + [ data ] }}"
    vars:
      data:
        name: "{{ item.agent_name }}"
        if_list: >-
          {%- for dict in item.if_list -%}
          {%-  if 'description' in dict -%}
          { 'name': '{{ dict.agent_name }}', 'description': '{{ dict.description }}'},
          {%- else -%}
          { 'name': '{{ dict.agent_name }}' },
          {%- endif -%}
          {%- endfor -%}
    when: '"segment" in item.type'
    loop: "{{ node_list.json }}"

  - name: generate config
    template:
      src: template/ceos.j2
      dest: "configs/{{ item.name }}.conf"
    loop: "{{ bridgedata }}"

  - name: upload generated config
    include_role:
      name: uploadconfig
    vars:
      url: "http://api-proxy/configs/{{ network_name }}/emulated_asis/"
      filepath: "configs/{{ item.agent_name }}.conf"
    loop: "{{ node_list.json }}"

- hosts: docker-host
  gather_facts: false
  become: yes
  vars:
    ansible_user: "{{ login_user}}"
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: "get convert table"
      uri:
        url: "http://localhost:15000/topologies/{{ network_name }}/emulated_asis/topology/layer3/config_params"
        method: "GET"
        body_format: json
      register: node_list


    - copy:
        src: "configs/{{ item.agent_name }}.conf"
        dest: "{{ ansible_runner_dir }}/clab/{{ item.agent_name }}.conf"
      loop: "{{ node_list.json }}"
      ignore_errors: True

    - name: "get clab topo yaml"
      uri:
        url: "http://localhost:15000/topologies/{{ network_name }}/emulated_asis/topology/layer3/containerlab_topology?image={{ crpd_image }}&bind_license=license.key:/tmp/license.key:ro"
        method: "GET"
        body_format: json
      register: containerlab

    - name: Creating clab-topo.yaml
      copy:
        dest: "{{ ansible_runner_dir }}/clab/clab-topo.yaml"
        content: "{{ containerlab.json | to_yaml }}"

    - name: "delete ovs-br {{ item.key }}"
      shell: "ovs-vsctl del-br {{ item.key }}"
      when: '"ovs" in item.value.kind'
      loop: "{{ lookup( 'ansible.builtin.dict', containerlab.json.topology.nodes) }}"
      ignore_errors: True

    - name: "create ovs-br {{ item.key }}"
      shell: "ovs-vsctl add-br {{ item.key }}"
      when: '"ovs" in item.value.kind'
      loop: "{{ lookup( 'ansible.builtin.dict', containerlab.json.topology.nodes) }}"
      ignore_errors: True

    - name: deploy containerlab
      shell:
        cmd: "containerlab deploy --topo clab-topo.yaml --reconfigure"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"

    - name: enable bgp license
      shell:
        cmd: "sudo containerlab exec --topo clab-topo.yaml --label clab-node-kind=juniper_crpd --cmd 'cli request system license add /tmp/license.key'"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"

    - name: "get convert table"
      uri:
        url: "http://localhost:15000/topologies/{{ network_name }}/emulated_asis/topology"
        method: "GET"
        body_format: json
      register: topology

    - name: search L3 network index
      set_fact:
        layer3index: "{{ l3_index }}"
      when: item['network-id'] == "layer3"
      loop: "{{ topology.json | json_query('*.network[]') }}"
      loop_control:
        index_var: l3_index

    - name: generate iperf endpoint  static-route info
      set_fact:
        iperf_list: "{{ iperf_list | default([]) + [ item ] }}"
      vars:
        query: '*.network[{{ layer3index }}].node[*]'
      when: item["mddo-topology:l3-node-attributes"]["node-type"] == 'endpoint'
      loop: "{{ topology.json | json_query(query) | flatten }}"

    - name: import setup_iperf.yaml task
      ansible.builtin.import_tasks: "{{ usecase_common_name }}/setup_iperf.yaml"
      when: iperf_list is defined

