---
- hosts: localhost
  connection: local
  gather_facts: false

  tasks:
  - name: "get convert table"
    uri:
      url: "http://api-proxy/topologies/{{ network_name }}/{{ snapshot_name }}/topology/layer3/config_params"
      method: "GET"
      body_format: json
    register: layer3_convert_table

  - name: generate config
    template:
      src: template/crpd/common/crpd.j2
      dest: "/app/{{ item.name }}.conf"
    when: '"segment" not in item.type'
    loop: "{{ layer3_convert_table.json }}"

  - name: "get ospf node table (select ospf_proc node)"
    uri:
      url: "http://api-proxy/topologies/{{ network_name }}/{{ snapshot_name }}/topology/layer_type_ospf/interfaces?node_type=ospf_proc"
      method: "GET"
      body_format: json
    register: ospf_nodes

  - name: "get layer3 node table (reject segment node)"
    uri:
      url: "http://api-proxy/topologies/{{ network_name }}/{{ snapshot_name }}/topology/layer3/nodes?exc_node_type=segment"
      method: "GET"
      body_format: json
    register: layer3_nodes

  - name: "get bgp_proc node table"
    uri:
      url: "http://api-proxy/topologies/{{ network_name }}/{{ snapshot_name }}/topology/bgp_proc/interfaces"
      method: "GET"
      body_format: json
    register: bgp_proc_nodes

  ## layer3 (static-route) ##
  ## crpd_routingoption_asn.j2       crpd_routingoption_routerid.j2  crpd_routingoption_static.j2
  - name: generate static-route config
    template:
      src: template/crpd/layer3/crpd_routing-option-static.j2
      dest: "/app/{{ item.node }}_routing-options-static.conf"
    loop: "{{ layer3_nodes.json | json_query('nodes[*]') }}"

  - name: merge static-route config
    shell: "cat /app/{{ item.node }}_routing-options-static.conf >>  /app/{{ item.node }}.conf ; rm /app/{{ item.node }}_routing-options-static.conf"
    loop: "{{ layer3_nodes.json | json_query('nodes[*]') }}"

  - name: generate router-id config (bgp)
    template:
      src: template/crpd/bgp/crpd_routing-option-routerid.j2
      dest: "/app/{{ item.node }}_routing-options-routerid.conf"
    loop: "{{ layer3_nodes.json | json_query('nodes[*]') }}"

  - name: merge router-id config
    shell: "cat /app/{{ item.node }}_routing-options-routerid.conf >>  /app/{{ item.node }}.conf ; rm /app/{{ item.node }}_routing-options-routerid.conf"
    loop: "{{ layer3_nodes.json | json_query('nodes[*]') }}"

  - name: generate router-id config (ospf)
    template:
      src: template/crpd/ospf/crpd_routing-option-routerid.j2
      dest: "/app/{{ item.node }}_routing-options-routerid.conf"
    loop: "{{ layer3_nodes.json | json_query('nodes[*]') }}"

  - name: merge router-id config
    shell: "cat /app/{{ item.node }}_routing-options-routerid.conf >>  /app/{{ item.node }}.conf ; rm /app/{{ item.node }}_routing-options-routerid.conf"
    loop: "{{ layer3_nodes.json | json_query('nodes[*]') }}"

  - name: generate asn config
    template:
      src: template/crpd/bgp/crpd_routing-option-asn.j2
      dest: "/app/{{ item.node }}_routing-options-asn.conf"
    loop: "{{ layer3_nodes.json | json_query('nodes[*]') }}"

  - name: merge asn config
    shell: "cat /app/{{ item.node }}_routing-options-asn.conf >>  /app/{{ item.node }}.conf ; rm /app/{{ item.node }}_routing-options-asn.conf"
    loop: "{{ layer3_nodes.json | json_query('nodes[*]') }}"

  ## bgp_proc, bgp policy and peer ##

  - name: generate policy config
    template:
      src: template/crpd/common/crpd_policy.j2
      dest: "/app/{{ item['supports'][0]['node-ref'] }}_policy.conf"
    loop: "{{ bgp_proc_nodes.json | json_query('nodes[*]') }}"

  - name: merge policy config
    shell: "cat /app/{{ item['supports'][0]['node-ref'] }}_policy.conf >> /app/{{ item['supports'][0]['node-ref'] }}.conf ; rm /app/{{ item['supports'][0]['node-ref'] }}_policy.conf"
    loop: "{{ bgp_proc_nodes.json | json_query('nodes[*]') }}"

  - name: generate bgp peer config
    template:
      src: template/crpd/bgp/crpd_bgp.j2
      dest: "/app/{{ item['supports'][0]['node-ref'] }}_bgp.conf"
    loop: "{{ bgp_proc_nodes.json | json_query('nodes[*]') }}"

  - name: merge bgp peer config
    shell: "cat /app/{{ item['supports'][0]['node-ref'] }}_bgp.conf >> /app/{{ item['supports'][0]['node-ref'] }}.conf ; rm /app/{{ item['supports'][0]['node-ref'] }}_bgp.conf"
    loop: "{{ bgp_proc_nodes.json | json_query('nodes[*]') }}"

  ## ospf ##

  - name: generate ospf config
    template:
      src: template/crpd/ospf/crpd_ospf.j2
      dest: "/app/{{ item.1.node }}_ospf_area{{item.0.attribute.identifier}}.conf"
    loop: "{{ ospf_nodes.json | subelements('nodes', skip_missing=True) }}"

  - name: merge ospf config
    shell: "cat /app/{{ item.1.node }}_ospf_area{{item.0.attribute.identifier}}.conf >> /app/{{ item.1.node }}.conf ; rm /app/{{ item.1.node }}_ospf_area{{item.0.attribute.identifier}}.conf"
    loop: "{{ ospf_nodes.json | subelements('nodes', skip_missing=True) }}"

  ## bridge ##

  - name: generate bridge data
    set_fact:
      bridge_data: "{{ bridge_data | default([])  + [ data ] }}"
    vars:
      data:
        name: "{{ item.agent_name }}"
        if_list: >-
          {%- for dict in item.if_list -%}
          {%-  if 'description' in dict -%}
          { 'name': '{{ dict.agent_name }}', 'description': '{{ dict.description }}'},
          {%- else -%}
          { 'name': '{{ dict.agent_name }}' },
          {%- endif -%}
          {%- endfor -%}
    when: '"segment" in item.type'
    loop: "{{ layer3_convert_table.json }}"

  - name: generate bridge config
    template:
      src: template/ceos/layer3/ceos.j2
      dest: "/app/{{ item.name }}.conf"
    loop: "{{ bridge_data }}"

  - name: upload generated config
    include_role:
      name: upload_config
    vars:
      url: "http://api-proxy/configs/{{ network_name }}/{{ snapshot_name }}/"
      filepath: "/app/{{ item.agent_name }}.conf"
    loop: "{{ layer3_convert_table.json }}"

  - name: "deploy containerlab"
    uri:
      url: "http://{{ worker_node_address }}:{{ worker_port }}/endpoint"
      method: "POST"
      headers:
        Content-Type: application/json
      body_format: json
      body:
        message: clab
        usecase_name: "{{ usecase_name }}"
        network_name: "{{ network_name }}"
        crpd_image: "{{ crpd_image }}"
        snapshot_name: "{{ snapshot_name }}"
        remote_address: "{{ remote_address }}"

  - name: "setup iperf"
    uri:
      url: "http://{{ worker_node_address }}:{{ worker_port }}/endpoint"
      method: "POST"
      headers:
        Content-Type: application/json
      body_format: json
      body:
        message: iperf
        usecase_name: "{{ usecase_name }}"
        network_name: "{{ network_name }}"
        crpd_image: "{{ crpd_image }}"
        snapshot_name: "{{ snapshot_name }}"
        remote_address: "{{ remote_address }}"

