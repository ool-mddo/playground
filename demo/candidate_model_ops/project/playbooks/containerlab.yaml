- hosts: localhost
  connection: local
  gather_facts: false
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
    with_clab: "{{ with_clab }}"
    iperf_params_file:  "{{ ansible_runner_dir }}/project/playbooks/configs/iperf_params.json"  # in remote host path

  tasks:
    - name: "get convert table"
      uri:
        url: "http://localhost:15000/topologies/{{ network_name }}/{{ snapshot_name }}/topology/layer3/config_params"
        method: "GET"
        body_format: json
      register: layer3_convert_table
    
    - name: download generated config
      shell: "curl {{ url }}/{{ item.agent_name }}.conf | jq -r .text > {{ filepath }}"
      vars:
        url: "http://localhost:15000/configs/{{ network_name }}/{{ snapshot_name }}"
        filepath: "{{ ansible_runner_dir }}/clab/{{ item.agent_name }}.conf"
      loop: "{{ layer3_convert_table.json }}"

    - name: "get convert table"
      uri:
        url: "http://localhost:15000/topologies/{{ network_name }}/{{ snapshot_name }}/topology/layer3/config_params"
        method: "GET"
        body_format: json
      register: layer3_convert_table

    - name: "get clab topo yaml"
      uri:
        url: "http://localhost:15000/topologies/{{ network_name }}/{{ snapshot_name }}/topology/layer3/containerlab_topology?image={{ crpd_image }}&bind_license=license.key:/tmp/license.key:ro"
        method: "GET"
        body_format: json
      register: containerlab

    - name: Creating clab-topo.yaml
      copy:
        dest: "{{ ansible_runner_dir }}/clab/clab-topo.yaml"
        content: "{{ containerlab.json | to_yaml }}"

    - name: "delete ovs-br {{ item.key }}"
      shell: "ovs-vsctl del-br {{ item.key }}"
      when: with_clab == "true" and "ovs" in item.value.kind
      loop: "{{ lookup( 'ansible.builtin.dict', containerlab.json.topology.nodes) }}"
      ignore_errors: true

    - name: "create ovs-br {{ item.key }}"
      shell: "ovs-vsctl add-br {{ item.key }}"
      when: with_clab == "true" and "ovs" in item.value.kind
      loop: "{{ lookup( 'ansible.builtin.dict', containerlab.json.topology.nodes) }}"
      ignore_errors: true

    - name: deploy containerlab
      shell:
        cmd: "containerlab deploy --topo clab-topo.yaml --reconfigure"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"
      when: with_clab == "true"

    - name: enable bgp license
      shell:
        cmd: "sudo containerlab exec --topo clab-topo.yaml --label clab-node-kind=juniper_crpd --cmd 'cli request system license add /tmp/license.key'"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"
      when:
        with_clab == "true"

    - name: "get layer3 topology (select endpoint node)"
      uri:
        url: "http://localhost:15000/topologies/{{ network_name }}/{{ snapshot_name }}/topology/layer3/interfaces?node_type=endpoint"
        method: "GET"
        body_format: json
      register: layer3_nodes

    - name: generate iperf endpoint static-route info
      set_fact:
        iperf_list: "{{ iperf_list | default([]) + [ item ] }}"
      loop: "{{ layer3_nodes.json | json_query('nodes[*]') }}"

    - name: setting eth1 & default routing (debug)
      debug:
        msg: "{{ exec_container }} {{ add_eth1_ip }}; {{ exec_container }} {{ del_default_route }}; {{ exec_container }} {{ add_default_route }}"
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item['node'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
        add_eth1_ip: 'ip addr add {{ item["interfaces"][0]["attribute"]["ip-address"][0] }} dev eth1 '
        del_default_route: "ip route del default via 172.20.20.1"
        add_default_route: 'ip route add default via {{ item["attribute"]["static-route"][0]["next-hop"] }}'
      loop: "{{ iperf_list }}"

    - name: setting eth1 & default routing
      shell:
        cmd: "{{ exec_container }} {{ add_eth1_ip }}; {{ exec_container }} {{ del_default_route }}; {{ exec_container }} {{ add_default_route }}"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item['node'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
        add_eth1_ip: 'ip addr add {{ item["interfaces"][0]["attribute"]["ip-address"][0] }} dev eth1 '
        del_default_route: "ip route del default via 172.20.20.1"
        add_default_route: 'ip route add default via {{ item["attribute"]["static-route"][0]["next-hop"] }}'
      loop: "{{ iperf_list }}"
      ignore_errors: true
      when:
        with_clab == "true"

    - name: generate iperf command parameter
      uri:
        url: "http://localhost:15000/usecases/{{ usecase_name }}/iperf_commands?network={{ network_name }}&snapshot={{ snapshot_name }}"
        method: GET
        body_format: json
      register:
        iperf_commands

    - name: Save iperf commands data to a file
      copy:
        content: "{{ iperf_commands.json }}"
        dest: "{{ iperf_params_file }}"

    - name: iperf server command (debug)
      debug:
        msg: '{{ exec_container }} /bin/bash -c "nohup iperf3 -s -p {{ item.1.server_port }} > out_{{ item.1.server_port }}.log &"'
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item.0['server_node'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
      with_subelements:
        - "{{ lookup('file', iperf_params_file) }}"
        - clients

    - name: iperf server command
      shell:
        cmd: '{{ exec_container }} /bin/bash -c "nohup iperf3 -s -p {{ item.1.server_port }} > out_{{ item.1.server_port }}.log 2>&1 &"'
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item.0['server_node'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
      with_subelements:
        - "{{ lookup('file', iperf_params_file) }}"
        - clients
      when:
        with_clab == "true"

    - name: iperf client command (debug)
      debug:
        msg: '{{ exec_container }} /bin/bash -c "nohup iperf3 -t 0 -c {{ item.1["server_address"] }} -b {{ item.1.rate | int }}K -p {{ item.1.server_port }} > out_{{ item.0.server_node }}.log &"'
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item.1['client_node'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
      with_subelements:
        - "{{ lookup('file', iperf_params_file) }}"
        - clients

    - name: iperf client command
      shell:
        cmd: '{{ exec_container }} /bin/bash -c "nohup iperf3 -t 0 -c {{ item.1["server_address"] }} -b {{ item.1.rate | int }}K -p {{ item.1.server_port }} > out_{{ item.0.server_node }}.log 2>&1 &"'
      vars:
        exec_container: "sudo containerlab inspect --all --format json | jq '.containers[] | select( .name | contains (\"{{ item.1['client_node'] }}\")) | .name' | xargs -ICONTAINER docker exec CONTAINER "
      with_subelements:
        - "{{ lookup('file', iperf_params_file) }}"
        - clients
      when:
        with_clab == "true"

