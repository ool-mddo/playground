- hosts: localhost
  connection: local
  gather_facts: false
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
    with_clab: "{{ with_clab }}"
    iperf_params_file:  "{{ ansible_runner_dir }}/project/playbooks/configs/iperf_params.json"  # in remote host path
    remote_address: localhost
    conductor_address: "{{ remote_address }}:15000"

  tasks:
    - shell: 'echo "job_status{jobname=\"\",network_name=\"\",snapshot_name=\"\"} 0" > {{ ansible_runner_dir }}/node_exporter/prom/textfile.prom'

    - name: "get clab topo yaml"
      uri:
        url: "http://{{ conductor_address }}/topologies/{{ network_name }}/{{ snapshot_name }}/topology/layer3/containerlab_topology?image={{ crpd_image }}&bind_license=license.key:/tmp/license.key:ro"
        method: "GET"
        body_format: json
      register: containerlab

    - name: "delete ovs-br {{ item.key }}"
      shell: "ovs-vsctl del-br {{ item.key }}"
      when: with_clab == "true" and "ovs" in item.value.kind
      loop: "{{ lookup( 'ansible.builtin.dict', containerlab.json.topology.nodes) }}"
      ignore_errors: true

    - name: find clab-topo.yaml
      shell:
        cmd: "ls | grep clab-topo.yaml"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"
      register: exist_topo
      ignore_errors: true

    - name: Creating clab-topo.yaml
      copy:
        dest: "{{ ansible_runner_dir }}/clab/clab-topo.yaml"
        content: "{{ containerlab.json | to_yaml }}"
      when: "'clab-topo.yaml' not in exist_topo.stdout_lines"

    - name: destroy containerlab
      shell:
        cmd: "containerlab destroy --topo clab-topo.yaml --cleanup"
      args:
        chdir: "{{ ansible_runner_dir }}/clab"
      when: with_clab == "true"

